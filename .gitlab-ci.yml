variables:
  CI_DISPOSABLE_ENVIRONMENT: "true"
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_TLS_CERTDIR: ""

.base:
  image: xenoky/lwk-builder@sha256:b3ed5a58a179e228cc25c632ce28aaab641df247fef9c649064a3eff44773b87
  tags:
    - cloud
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - stuck_or_timeout_failure  
  services:
    - docker:20.10.12-dind


fmt_clippy:
  extends: .base
  script:
    - cp ./context/env.sh / && cd / && . ./env.sh && cd -
    - cargo fmt --check
    - cargo clippy --all-targets -- -D warnings

test_clean:
  image: rust:1.75
  script:
    - cargo build

test_wollet:
  extends: .base
  script:
    - docker pull xenoky/local-jade-emulator:1.0.27
    - cp ./context/env.sh / && cd / && . ./env.sh && cd -
    - cargo test -p lwk_wollet -p lwk_signer

test_jade:
  extends: .base
  variables:
      TMPDIR: ${CI_PROJECT_DIR}  # otherwise issue with the docker
  script:
    - docker pull tulipan81/blind_pin_server:v0.0.7
    - docker pull xenoky/local-jade-emulator:1.0.27
    - cargo test -p lwk_jade

test_ledger:
  extends: .base
  script:
    - cargo test -p lwk_ledger --features asyncr

test_serial:
  extends: .base
  variables:
  script:
    - cp ./context/env.sh / && cd / && . ./env.sh && cd -
    - cargo test --no-run --features serial

# run tests for minor crates all together
test_minor:
  extends: .base
  script:
    - cargo test -p lwk_tiny_jrpc -p lwk_app -p lwk_containers -p lwk_common -p lwk_hwi -p lwk_rpc_model -p lwk_signer

test_cli:
  extends: .base
  script:
    - cp ./context/env.sh / && cd / && . ./env.sh && cd -
    - cargo test -p lwk_cli

unit_tests:
  extends: .base
  script:
    - cargo nextest run --lib --profile unit # ensure unit tests don't take more than a sec each

test_coverage:
  extends: .base
  variables:
    RUSTFLAGS: "-C instrument-coverage"
    LLVM_PROFILE_FILE: "coverage-%p-%m.profraw"
    TMPDIR: ${CI_PROJECT_DIR}  # otherwise issue with the docker

  script:
    - docker pull tulipan81/blind_pin_server:v0.0.7
    - docker pull xenoky/local-jade-emulator:1.0.27
    - cp ./context/env.sh / && cd / && . ./env.sh && cd -
    - cargo nextest run --features foreign_bindings,asyncr --profile ci
    - grcov . -s . --binary-path ./target/debug/ -t cobertura --branch --ignore-not-existing --ignore "*cargo*" -o ./target/coverage.xml -p $(pwd)
    - "xmllint --xpath \"concat('Coverage: ', 100 * string(//coverage/@line-rate), ' perc')\" target/coverage.xml"
    - grcov . -s . --binary-path ./target/debug/ -t html --branch --ignore-not-existing --ignore "*cargo*" -o ./target/coverage/ -p $(pwd)
  coverage: '/Coverage: \d+(?:\.\d+)?/'
  artifacts:
    paths:
      - target/coverage.xml
      - target/coverage/
      - target/nextest/ci/junit.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: target/coverage.xml
      junit: target/nextest/ci/junit.xml

build_cli:
  extends: .base
  only:
    - master@liquid/lwk
  script:
    - cargo build --release -p lwk_cli
  artifacts:
    paths:
      - target/release/lwk_cli
    when: always
    expire_in: 14 days

audit:
  extends: .base
  script:
    - cargo audit --deny yanked

doc:
  extends: .base
  variables:
    RUSTDOCFLAGS: "-D warnings --cfg docsrs"
  script:
    - cp ./context/env.sh / && cd / && . ./env.sh && cd -
    # - cargo +nightly doc --all-features --no-deps # we can't use --all-features right now because of lightning feature
    - cargo +nightly doc --no-deps -p lwk_app --all-features
    - cargo +nightly doc --no-deps -p lwk_cli --all-features
    - cargo +nightly doc --no-deps -p lwk_common --all-features
    - cargo +nightly doc --no-deps -p lwk_containers --all-features
    - cargo +nightly doc --no-deps -p lwk_hwi --all-features
    - cargo +nightly doc --no-deps -p lwk_jade --all-features
    - cargo +nightly doc --no-deps -p lwk_ledger --all-features
    - cargo +nightly doc --no-deps -p lwk_rpc_model --all-features
    - cargo +nightly doc --no-deps -p lwk_signer --all-features
    - cargo +nightly doc --no-deps -p lwk_test_util --all-features
    - cargo +nightly doc --no-deps -p lwk_tiny_jrpc --all-features
    - cargo +nightly doc --no-deps -p lwk_wasm --all-features
    - cargo +nightly doc --no-deps -p lwk_wollet --all-features
    - cargo +nightly doc --no-deps -p lwk_bindings --features foreign_bindings
    
examples:
  extends: .base
  script:
    - cargo run --example list_transactions

bindings:
  extends: .base
  script:
    - cp ./context/env.sh / && cd / && . ./env.sh && cd -
    - cargo test -p lwk_bindings --features foreign_bindings

csharp:
  extends: .base
  script:
    - cargo build --release -p lwk_bindings
    - mkdir csharp
    - cp target/release/liblwk.so csharp/
    - uniffi-bindgen-cs --library csharp/liblwk.so --out-dir csharp
    - sed -i 's#\"lwk\"#\"./liblwk.so\"#g' csharp/lwk.cs # this is an hack, but make it work until we understand how to properly reference the dynamic lib
    - cp lwk_bindings/tests/bindings/list_transactions.cs csharp
    - cp lwk_bindings/tests/test_data/test-dotnet.csproj csharp
    - cd csharp && dotnet run && cd -
    - rm -rf csharp/bin && rm -rf csharp/obj # remove dotnet-build created files
  artifacts:
    paths:
      - csharp

just:
  extends: .base
  script:
    - just python-test-bindings
    - just kotlin # kotlin-android would require cargo-ndk and various targets, tested on github which produce the kotlin package

wasm:
  extends: .base
  variables:
    RUSTFLAGS: "--cfg=web_sys_unstable_apis"
  script:
    - cp ./context/env.sh / && cd / && . ./env.sh && cd -
    - cargo check --target wasm32-unknown-unknown -p lwk_common -p lwk_rpc_model -p lwk_containers -p lwk_hwi
    - cargo check --target wasm32-unknown-unknown -p lwk_wollet --no-default-features --features esplora,serial,amp2,amp0
    - cargo check --target wasm32-unknown-unknown -p lwk_signer --no-default-features
    - cargo check --target wasm32-unknown-unknown -p lwk_jade --no-default-features --features asyncr --features serial
    - cargo check --target wasm32-unknown-unknown -p lwk_ledger --no-default-features
    # - cd lwk_wasm && WASM_BINDGEN_TEST_TIMEOUT=60 wasm-pack test --chrome --headless --features serial && cd - # TODO: restore browser tests, at the moment fail with "Cannot assign requested address"
    - cd lwk_wasm && RUSTFLAGS="--cfg=web_sys_unstable_apis" CARGO_PROFILE_RELEASE_OPT_LEVEL=z wasm-pack build --features serial && cd -
    # testing nodejs package
    - cd lwk_wasm
    - RUSTFLAGS="--cfg=web_sys_unstable_apis" CARGO_PROFILE_RELEASE_OPT_LEVEL=z wasm-pack build --target nodejs --out-dir pkg_node -- --features serial
    - sed -i 's/"lwk_wasm"/"lwk_node"/g' pkg_node/package.json
    - cd tests/node
    - npm install
    - node network.js
    - node list_transactions.js
    - node amp0.js
  artifacts:
    paths:
      - lwk_wasm/pkg

nix:
  image: nixos/nix:latest
  variables:
      EXP_FEAT: --extra-experimental-features nix-command --extra-experimental-features flakes
      CACHE: --extra-trusted-public-keys nix.casatta.it:HseKZh7436/vKXfZDBHbhr7wwAkzjLwY5BIq+OOrITg= --extra-substituters https://nix.casatta.it
  script:
    - nix $EXP_FEAT $CACHE build .
    - nix $EXP_FEAT $CACHE develop . -c cargo test -p lwk_cli --features registry -- registry_publish
    - nix $EXP_FEAT $CACHE develop . -c rust-analyzer analysis-stats . 2>log # prints ERROR if there are cyclic deps with dev-deps
    - (! grep ERROR log)

boltz:
  extends: .base
  script:
    - cd lwk_boltz
    - just test-mrh
    - just test-reverse
    - just test-reverse-concurrent
    - just test-reverse-restore
    - just test-submarine
    - just test-submarine-restore
    